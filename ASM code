.arm

@ Syscall Definitions
.equ SYSCALL_EXIT,     1
.equ SYSCALL_WRITE,    4

@ Other Definitions
.equ STDOUT,	       1

        .globl _start
_start:

	mov	r0,#0

	@######################
	@ Your code here
	@######################

	@######################

	bl	print_number

	ldr	r1,=message
	bl	print_string

	@####################
	@ Your Code Also Here
	@####################

	@####################



        @================================
        @ Exit
        @================================
exit:
	mov	r0,#0			@ Return a zero
        mov	r7,#SYSCALL_EXIT	@
        swi	0x0			@ Run the system call


	@====================
	@ print_string
	@====================
	@ Null-terminated string to print pointed to by r1
	@ the value in r1 is destroyed by this routine


@.thumb

print_string:

	push    {r0,r2,r7,r10,lr}	// Save r0,r2,r7,r10,lr on stack

	mov	r2,#0

	@======================
	count loop:
		add r2,r2,#1 //increment count
		ldrb r10,[r1,r2]	//load byte from address r1+r2
		cmp r10,#15			//compare against 15
		bne	count_loop		//if not 0,loop
	@======================

	@======================

	@ The length of the string pointed to by r1
	@ Should be put in r2 by your code above

	mov	r0,#STDOUT		// R0 Print to stdout
	ldr r1,=message				// R1 points to our string
	mov r2,#15				// R2 is the length
	mov	r7,#SYSCALL_WRITE	// Load syscall number
	swi	0x0			// System call

	pop	{r0,r2,r7,r10,pc}       // pop r0,r2,r3,pc from stack

.arm

        @#############################
	@ print_number
	@#############################
	@ r0 = value to print
	@ r0 is destroyed by this routine

print_number:
	push	{r10,LR}	// push r10 and link register
        ldr	r10,=buffer	// load buffer value in r10
        add	r10,r10,#1	//increment by 1

divide:
	mov	r1,#10		//mov r1 by 10

	bl	divide_by_10	//branch link function divide_by_10
	add	r8,r8,#0x30	//	add value to r8
	strb	r8,[r10],#-1	//decrement value in address of r10 to r8
	adds	r0,r7,#0	//comapare with 0
	bne	divide		//if not 0,loop

write_out:
        add	r1,r10,#1	//write number increment by one

        bl	print_string	//print string

        pop	{r10,LR}	//pop r10 and link register

        mov	pc,lr		//mov link register to pc

	##############################
	# divide_by_10
	##############################
	# r0=numerator
        # r4,r5 trashed
	# r7 = quotient, r8 = remainder

divide_by_10:
	ldr	r4,=429496730		// 1/10 * 2^32
	sub	r5,r0,r0,lsr #30
	umull	r8,r7,r4,r5		// {r8,r7}=r4*r5

	mov	r4,#10			// calculate remainder
	mul	r8,r7,r4
	sub	r8,r0,r8

	mov	pc,lr

.data
message:	.string ": ECE471 is cool\n"

@ BSS
.lcomm buffer,11
char buffer[11]
